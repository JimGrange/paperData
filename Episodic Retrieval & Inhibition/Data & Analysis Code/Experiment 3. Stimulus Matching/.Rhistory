m1 <- lmer(frequency ~ attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
summary(m1)
library(lme4)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lmer(frequency ~ attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
summary(m1)
library(lme4)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lmer(frequency ~ attitude + (1|subject) + (1|scenario),
REML = TRUE, data = data)
summary(m1)
x = lm(frequency ~ attitude, data)
summary(x)
library(lme4)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lmer(frequency ~ attitude + (1|subject) + (1|scenario),
REML = TRUE, data = data)
summary(m1)
library(lme4)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lmer(frequency ~ attitude + gender + (1|subject) + (1|scenario),
REML = TRUE, data = data)
summary(m1)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m2 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
summary(m1)
summary(m2)
anova(m1, m2)
head(data)
m0 <- lmer(frequency ~ gender, REML = FALSE, data = data)
m0 <- lm(frequency ~ gender, REML = FALSE, data = data)
lm
m0 <- lm(frequency ~ gender, data = data)
m0
library(broom)
tidy(m0)
glance(m0)
m0.1 <- lm(frequency ~ gender + attitude, data = data)
glance(m0)
glance(m0.1)
anova(m0, m0.1)
m1 <- lm(frequency ~ gender, data = data)
AIC1 <- glance(m1)
str(AIC1)
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
AIC1 <- glance(m1)
AIC1 <- AIC1$AIC
AIC1
glance(m2)$AIC
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
glance(m3)
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
AIC1 <- glance(m1)$AIC
AIC2 <- glance(m2)$AIC
AIC3 <- glance(m3)$AIC
AIC4 <- glance(m4)$AIC
AIC1
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
AIC1 <- glance(m1)$AIC
AIC2 <- glance(m2)$AIC
AIC3 <- glance(m3)$AIC
AIC4 <- glance(m4)$AIC
AIC1
AIC2
AIC3
AIC4
glance(m1)
glance(m2)
glance(m3)
glance(m4)
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m0 <- lm(frequency ~ attitude, data = data)
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
AIC0 <- glance(m0)$AIC
AIC1 <- glance(m1)$AIC
AIC2 <- glance(m2)$AIC
AIC3 <- glance(m3)$AIC
AIC4 <- glance(m4)$AIC
AIC0
AIC1
AIC2
AIC3
AIC4
coef(m4)
head(data)
data$scenario
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m0 <- lm(frequency ~ attitude, data = data)
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m5 <- lmer(frequency ~ gender + attitude + (1 + attitude|subject) +
(1 + atttitude|scenario), REML = FALSE, data = data)
AIC0 <- glance(m0)$AIC
AIC1 <- glance(m1)$AIC
AIC2 <- glance(m2)$AIC
AIC3 <- glance(m3)$AIC
AIC4 <- glance(m4)$AIC
AIC5 <- glance(m5)$AIC
AIC0
AIC1
AIC2
AIC3
AIC4
AIC5
library(lme4)
library(broom)
data <- read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
m0 <- lm(frequency ~ attitude, data = data)
m1 <- lm(frequency ~ gender, data = data)
m2 <- lm(frequency ~ gender + attitude, data = data)
m3 <- lmer(frequency ~ gender + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m4 <- lmer(frequency ~ gender + attitude + (1|subject) + (1|scenario),
REML = FALSE, data = data)
m5 <- lmer(frequency ~ gender + attitude + (1 + attitude|subject) +
(1 + attitude|scenario), REML = FALSE, data = data)
AIC0 <- glance(m0)$AIC
AIC1 <- glance(m1)$AIC
AIC2 <- glance(m2)$AIC
AIC3 <- glance(m3)$AIC
AIC4 <- glance(m4)$AIC
AIC5 <- glance(m5)$AIC
AIC0
AIC1
AIC2
AIC3
AIC4
AIC5
anova(m4, m5)
anova(m0, m5)
anova(m1, m5)
coef(m5)
velocity <- function(delta, t){
delta <- delta * (1 - (125 / (50 * sqrt(2 * pi)) *
exp(-((t - 50) ^ 2) / (2 * (50 ^ 2)))))
}
delta(50, 1)
velocity(50, 1)
velocity <- function(delta, t){
delta <- delta * (1 - (125 / (50 * sqrt(2 * pi)) *
exp(-((t - 50) ^ 2) / (2 * (50 ^ 2)))))
return(delta)
}
velocity(50, 1)
velocity(50, 1)
velocity(40, 1)
velocity(40, 2)
velocity(40, 6)
velocity <- function(delta, t){
delta <- delta * (1 - (125 / (50 * sqrt(2 * pi)) *
exp(-((t - 50) ^ 2) / (2 * (50 ^ 2)))))
return(delta)
}
t <- 1:171
delta <-
]
velocity <- function(delta, t){
delta <- delta * (1 - (125 / (50 * sqrt(2 * pi)) *
exp(-((t - 50) ^ 2) / (2 * (50 ^ 2)))))
return(delta)
}
t <- 1:171
delta <- seq(from = 1, to = 16, length.out = length(t))
?apply
velocity <- function(delta, t){
delta <- delta * (1 - (125 / (50 * sqrt(2 * pi)) *
exp(-((t - 50) ^ 2) / (2 * (50 ^ 2)))))
return(delta)
}
t <- 1:171
delta <- seq(from = 1, to = 16, length.out = length(t))
x <- numeric(length(t))
for(i in 1:length(t)){
x[i] <- velocity(delta[i], t[i])
}
x
plot(x)
$$ \eta_{category} = \eta_{x} x \eta_{y}
$$ \eta_{category} = \eta_{x} * \eta_{y}$$
$$Accuracy(|left-stimulus) = P(left-auditory|x, y) + P(left-visual|x, y)$$.
log(800)-log(300)
500/300
(x <- rnorm(100))
(x <- rnorm(100))
(x <- rnorm(100))
(x <- rnorm(100))
(x <- rnorm(100))
(x <- rnorm(100))
library(pwr)
install.packages("pwr")
library(pwr)
pwr.r.test(r = 0.3, sig.level = 0.05, power = .8)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .8)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .9)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .95)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .92)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .93)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .94)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .95)
pwr.r.test(r = 0.5385, sig.level = 0.05, power = .95)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .95)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .93)
pwr.r.test(r = 0.4, sig.level = 0.05, power = .94)
?replicate
?dcat
install.packages("statcheck")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(statcheck)
install.packages("statcheck")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("statscheck")
install.packages("statcheck")
install.packages("statcheck")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("statcheck")
install.packages("ggplot2")
library(shiny)
# Easiest way is to use runGitHub
runGitHub("shiny_example", "rstudio")
### Analysis script for episodic retrieval & stimulus repetition
#------------------------------------------------------------------------------
### General set-up
# clear workspace
rm(list = ls())
# set working directory
setwd("~/Git/lab-book/Agi's PhD/Episodic Retrieval/3. Stimulus Matching")
# load necessary functions file & load necessary packages
source("functions.R")
library(dplyr)
library(ggplot2)
library(ez)
library(BayesFactor)
# load the data files
match <- read.csv("match_data.csv")
mismatch <- read.csv("mismatch_data.csv")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### do preparation of data files
## code for n-2 response repetition
for(i in 3:nrow(match)){
if(match$stimulus.CRESP[i] == match$stimulus.CRESP[i - 2]){
match$respRep[i] <- "yes"
} else {
match$respRep[i] <- "no"
}
}
for(i in 3:nrow(mismatch)){
if(mismatch$stimulus.CRESP[i] == mismatch$stimulus.CRESP[i - 2]){
mismatch$respRep[i] <- "yes"
} else {
mismatch$respRep[i] <- "no"
}
}
# remove stimulus repetitions from n-1 and n-2 from mismatch condition
mismatch <- mismatch %>%
filter(stimN1 == "switch",
stimN2 == "switch")
# remove stimN1 and stimN2 from mismatch condition so both data files have
# identical column structure
mismatch <- mismatch %>%
select(-stimN1, -stimN2)
# remove CRESP column from each data frame
match <- select(match, -stimulus.CRESP)
mismatch <- select(mismatch, -stimulus.CRESP)
# add condition column to each data frame. Then re-order columns
match <- match %>%
mutate(condition = "match")
match <- match[c(7, 1, 2, 3, 6, 4, 5)]
mismatch <- mismatch %>%
mutate(condition = "mismatch")
mismatch <- mismatch[c(7, 1, 2, 3, 6, 4, 5)]
# merge data frame
fullData <- rbind(match, mismatch)
# change column names
colnames(fullData) <- c("condition", "subject", "trial", "sequence", "respRep",
"accuracy", "rt")
# save data frame
write.csv(fullData, "fullData", row.names = FALSE)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### Error Data Trimming
# Remove null trials (1st and 2nd trial of each block)
# which trials were null?
nullTrials <- c(1, 2, 121, 122, 241, 242)
# remove these trials
data <- fullData[! fullData$trial %in% nullTrials, ]
# add column to code for removing two trials following an error, initialised
# to zero
data <- mutate(data, accTrim = 0)
# populate this column
for(i in 3:nrow(data)){
data$accTrim[i] <- data$accuracy[i - 2] * data$accuracy[i - 1]
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### Error Analysis
# First, we need to see the OVERALL accuracy per participant, as we will want
# to remove people who do not meet a certain criteria
accuracy <- data %>%
group_by(subject) %>%
summarise(meanAccuracy = (sum(accuracy) / length(accuracy) * 100))
# which subjects fall below our criterion of 90% accuracy?
errorRemove <- accuracy[accuracy$meanAccuracy <= 90, ]$subject
# remove these subjects from the data file
data <- data[! data$subject %in% errorRemove, ]
# remove the 2 trials following an error
data <- subset(data, data$accTrim == 1)
# now produce a data frame with accuracy analysis per condition
accuracy <- data %>%
group_by(subject, condition, respRep, sequence) %>%
summarise(acc = (sum(accuracy) / length(accuracy)))
# now remove all error trials, so we are ready for RT analysis
data <- subset(data, data$accuracy == 1)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### response time analysis
# trim the RTs with fixed standard deviation upper limit
rtData <- getRTs(data = data, minRT = 150, sd = 2.5)
#---------
### ANOVA analsyis
# disable scientific notation
options(scipen = 999)
options(digits = 4)
#--- accuracy
accuracy <- data.frame(accuracy)
aovACC <- ezANOVA(
data = accuracy
, dv = .(acc)
, wid = .(subject)
, within = .(condition, sequence, respRep)
, between = NULL
, detailed = FALSE)
mainSequence <- accuracy %>%
group_by(sequence) %>%
summarise(meanAcc = mean(acc))
# how many subjects?
nSubs <- length(unique((finalRT$subject)))
# summarise the main effects
options(digits = 4)
finalAcc <- accuracy %>%
group_by(condition, respRep, sequence) %>%
summarise(accMean = mean(acc) * 100, SE = round(sd(acc) / sqrt(nSubs), 4) * 100)
#--- response time
# transfer to long format for analysis & later plotting, & change necessary
# columns to factors
finalRT <- doLong(rtData)
finalRT$condition <- factor(finalRT$condition)
finalRT$sequence <- factor(finalRT$sequence)
finalRT$respRep <- factor(finalRT$respRep)
finalRT$subject <- factor(finalRT$subject)
# summarise the response times
rtSummary <- finalRT %>%
group_by(condition, respRep, sequence) %>%
summarise(meanRT = mean(rt))
# ANOVA using ezANOVA
aovRT <- ezANOVA(
data = finalRT
, dv = .(rt)
, wid = .(subject)
, within = .(condition, sequence, respRep)
, between = NULL
, detailed = FALSE)
# summarise the response times
# how many subjects?
nSubs <- length(unique((finalRT$subject)))
mainCondition <- finalRT %>%
group_by(condition) %>%
summarise(meanRT = mean(rt))
mainSequence <- finalRT %>%
group_by(sequence) %>%
summarise(meanRT = mean(rt))
mainStimRep <- finalRT %>%
group_by(respRep) %>%
summarise(meanRT = mean(rt))
conditionSequence <- finalRT %>%
group_by(condition, sequence) %>%
summarise(meanRT = mean(rt))
conditionStimRep <- finalRT %>%
group_by(condition, respRep) %>%
summarise(meanRT = mean(rt))
sequenceStimRep <- finalRT %>%
group_by(respRep, sequence) %>%
summarise(meanRT = mean(rt))
all <- finalRT %>%
group_by(condition, respRep, sequence) %>%
summarise(meanRT = mean(rt), SE = round(sd(rt) / sqrt(nSubs)))
all$SE  <- as.numeric(all$SE)
# do plot
pd <- position_dodge(0.08)
theme_set(theme_gray(base_size = 18))
levels(all$respRep)[levels(all$respRep) == "repetition"] <- "Repetition"
levels(all$respRep)[levels(all$respRep) == "switch"] <- "Switch"
levels(all$sequence)[levels(all$sequence) == "aba"] <- "ABA"
levels(all$sequence)[levels(all$sequence) == "cba"] <- "CBA"
pdf("responseTimes.pdf", width = 8, height = 5)
plot <- ggplot(all, aes(x = sequence, y = meanRT, group = respRep, colour = respRep))
plot <- plot + geom_errorbar(aes(ymin = meanRT - SE, ymax = meanRT + SE), width = .15,
size = 0.5, position = pd)
plot <- plot + geom_line(aes(linetype = respRep), position = pd)
plot <- plot + geom_point(aes(shape = respRep), size = 2.3, position = pd)
plot <- plot + scale_x_discrete(name = "Task Sequence") + scale_y_continuous(name = "Response Time (ms)")
plot <- plot + scale_shape_discrete(name = "Response") +
scale_linetype_discrete(name = "Response") +
scale_colour_discrete(name = "Response")
plot <- plot + theme(panel.background = element_rect(fill = "grey86"))
plot_1 <- plot + facet_grid(  ~ condition)
plot_1
dev.off()
#------------------------------------------------------------------------------
# collate data for 2 way ANOVA with n-2 repetition cost as the DV
x <- rtData %>%
group_by(subject) %>%
summarise(repMatch = abaRepMatch - cbaRepMatch,
swMatch = abaSwMatch - cbaSwMatch,
repMismatch = abaRepMismatch - cbaRepMismatch,
swMismatch = abaSwMismatch - cbaSwMismatch)
# put into long format
newData <- NULL
for(i in 1:nrow(x)){
# matrix for each subject's data
subData <- matrix(0, nrow = 4, ncol = 4)
subData <- data.frame(subData)
colnames(subData) <- c("subject", "condition", "respRep", "rt")
# populate the data frame
subData[1, ] <- c(x$subject[i], "match", "repetition", x$repMatch[i])
subData[2, ] <- c(x$subject[i], "match", "switch", x$swMatch[i])
subData[3, ] <- c(x$subject[i], "mismatch", "repetition", x$repMismatch[i])
subData[4, ] <- c(x$subject[i], "mismatch", "switch", x$swMismatch[i])
newData <- rbind(newData, subData)
}
newData$subject <- factor(newData$subject)
newData$condition <- factor(newData$condition)
newData$respRep <- factor(newData$respRep)
newData$rt <- as.numeric(newData$rt)
bf <- anovaBF(rt ~ condition * respRep + subject, data = newData,
whichRandom = "subject")
bf <- recompute(bf, iterations = 100000)
bf
plotData2 <- newData %>%
group_by(condition, respRep) %>%
summarise(meanRT = mean(rt), se = sd(rt) / sqrt(nSubs))
colnames(plotData2)[2] <- "Response"
levels(plotData2$Response)[levels(plotData2$Response) == "repetition"] <- "Repetition"
levels(plotData2$Response)[levels(plotData2$Response) == "switch"] <- "Switch"
pdf("n2 cost.pdf", width = 8, height = 8)
p <- ggplot(plotData2, aes(x = condition, y = meanRT, group = Response,
colour = Response))
p<- p + geom_errorbar(aes(ymin = meanRT - se, ymax = meanRT + se),
width = 0.05, size = 0.5, position = pd)
p <- p + geom_line(aes(linetype  = Response), position = pd)
p <- p + geom_point(aes(shape = Response), size = 3, position = pd)
p <- p + labs(x = "Stimulus Condition", y = "N-2 Repetition Cost (ms)")
p <- p + theme(panel.background = element_rect(fill = "grey86"))
p
dev.off()
# Get the response time plot and the n--2 repetition cost plot stitched
library(gridExtra)
pdf("all_rts_Experiment3.pdf", width = 8, height = 8)
grid.arrange(plot_1, p)
dev.off()
bf
bf[4]/bf[2]
1/0.1598
plot(bf[3:4]/bf[2])
