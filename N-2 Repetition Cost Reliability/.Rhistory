rm(list = ls())
setwd("~/Git/paperData/N-2 Repetition Cost Reliability")
source("functions.R")
library(dplyr)
library(ez)
library(ggplot2)
library(moments)
library(tidyr)
library(Hmisc)
library(ppcor)
# make sure the most recent version of trimr is installed
#devtools::install_github("JimGrange/trimr")
library(trimr)
# import the data
target <- read.csv("raw_target.csv", stringsAsFactors = FALSE)
visual <- read.csv("raw_visual.csv", stringsAsFactors = FALSE)
numeric <- read.csv("raw_numeric.csv", stringsAsFactors = FALSE)
colnames(target) <- c("participant", "trial", "condition", "accuracy", "rt")
colnames(visual) <- c("participant", "trial", "condition", "accuracy", "rt")
colnames(numeric) <- c("participant", "trial", "condition", "accuracy", "rt")
# add accuracy trimming column to each data set & declare each paradigm
target <- mutate(target, paradigm = "target", accTrim = 0)
visual <- mutate(visual, paradigm = "visual", accTrim = 0)
numeric <- mutate(numeric, paradigm = "numeric", accTrim = 0)
#------------------------------------------------------------------------------
# for the 'equal trials' analysis
# visual <- subset(visual, trial < 361)
# numeric <- subset (numeric, trial < 361)
#------------------------------------------------------------------------------
### sort the null trials for each paradigm
## target data first because of the coding error
# trials to remove for participants 1-23
n23 <- c(1, 2, 103, 104, 205, 206, 307, 308)
# trials to remove for participants > 23
n24 <- c(1, 2, 121, 122, 241, 242, 361, 362)
# loop over participants and do the trimming
for(i in 1:nrow(target)){
if(target$participant[i] <= 23){
if(target$trial[i] %in% n23) {
target$condition[i] <- "null"
}
}
if(target$participant[i] > 23){
if(target$trial[i] %in% n24){
target$condition[i] <- "null"
}
}
}
## visual & numeric null trials
nullTrials <- c(1, 2, 121, 122, 241, 242, 361, 362)
for(i in 1:nrow(visual)){
if(visual$trial[i] %in% nullTrials){
visual$condition[i] <- "null"
}
}
for(i in 1:nrow(numeric)){
if(numeric$trial[i] %in% nullTrials){
numeric$condition[i] <- "null"
}
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### data collation & participant removal checks
# bind all data together
allData <- rbind(target, visual, numeric)
# remove the null trials
allData <- subset(allData, allData$condition != "null")
# check which participants don't have data for all conditions
incompleteRemoval <- completeData(allData)
# check which participants have accuracy too low
accCriterion <- 90
accRemoval <- accuracyRemoval(allData, accCriterion)
# collate all removal, and do the removal
participantsRemoved <- sort(unique(c(incompleteRemoval, accRemoval)))
allData <- allData[!allData$participant %in% participantsRemoved, ]
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# accuracy trimming (remove two trials following an error)
for(i in 3:nrow(allData)){
allData$accTrim[i] <- allData$accuracy[i - 2] * allData$accuracy[i - 1]
}
allData <- subset(allData, allData$accTrim == 1)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### main accuracy analysis
accuracy <- allData %>%
group_by(paradigm, condition, participant) %>%
summarise(rawAcc = (sum(accuracy) / length(accuracy)) * 100)
accuracy
trimmedAcc <- allData %>%
group_by(paradigm, condition, participant) %>%
summarise(rawAcc = (sum(accuracy) / length(accuracy)) * 100)
trimmedAcc
wideTrimmedAcc <- spread(trimmedAcc, condition, rawAcc)
wideTrimmedAcc
wideTrimmedAcc %>%
group_by(paradigm,participant) %>%
summarise(AccN2Cost=ABA-CBA)
AccN2Cost <- wideTrimmedAcc %>%
group_by(paradigm,participant) %>%
summarise(AccN2Cost=ABA-CBA)
AccN2Cost$AccN2Cost <- round(AccN2Cost$AccN2Cost, 0)
AccN2Cost
AccN2Cost <- wideTrimmedAcc %>%
group_by(paradigm,participant) %>%
summarise(AccN2Cost=ABA-CBA)
# round to nearest number
AccN2Cost$AccN2Cost <- round(AccN2Cost$AccN2Cost, 2)
ggplot(AccN2Cost, aes(x = AccN2Cost, colour = paradigm, linetype = paradigm)) +
geom_density(size = 1.2) +
theme(panel.background = element_rect(fill = "grey86"))
AccN2Cost
indData <- read.csv("ind_data.csv", stringsAsFactors = FALSE)
wideAccN2Cost <- spread(AccN2Cost, paradigm, AccN2Cost)
wideAccN2Cor <- merge(wideAccN2Cost, indData, by = "participant")
indAccN2Cor <- rcorr(as.matrix(wideAccN2Cor))
indAccN2Cor
round(indAccN2Cor$r, 3)
