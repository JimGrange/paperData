setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Grange (under review) re-analysis")
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Grange (under review) re-analysis")
source("functions.R")
# package for changing data from wide format to long format
if(require(reshape2)==FALSE){
install.packages("reshape2", dependencies=TRUE)
}
# package for summarising data
if(require(dplyr)==FALSE){
install.packages("dplyr", dependencies=TRUE)
}
#package for plotting
if(require(ggplot2)==FALSE){
install.packages("ggplot2", dependencies=TRUE)
}
#package for ANOVA
if(require(ez)==FALSE){
install.packages("ez", dependencies=TRUE)
}
# source the data & declare trimming details etc.
rawData <- read.csv("allData.csv")
colnames(rawData) <- c("subject", "trial", "condition", "task", "sequence",
"currentRCI", "previousRCI", "rciChange", "accuracy",
"rt")
# add column to store error trimming details (to remove trials afer error)
rawData <- mutate(rawData, accuracyTrim = 0)
# only select the pertinent columns
data <- select(rawData, subject, condition, sequence, currentRCI, rciChange,
accuracy, accuracyTrim, rt)
# remove null trials
data <- subset(data, data$sequence != "null")
# remove null trials
data <- subset(data, data$sequence != "null")
# add the accuracy trimming column (removing trial after error)
data <- addError(data)
# what is the accuracy threshold for inclusion
accCriterion <- 80
# what is the minimum RT allowed?
minRT <- 150
# how many SDs to trim RTs to?
sdCriterion <- 2.5
# how many trials per participant in the whole condition?
nTrials <- 384
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### do accuracy checks
# perceptual (location) condition
locationData <- subset(data, data$condition == "Perceptual")
locationACC <- data.frame(getAccuracy(locationData))
locationACC <- mutate(locationACC, avAccuracy = 0)
for(i in 1:nrow(locationACC)){
locationACC$avAccuracy[i] = mean(as.numeric(locationACC[i, 2:9]))
}
#which participants need to be removed?
locationRemoved <- locationACC$subject[which
(locationACC$avAccuracy < accCriterion)]
# Memory (parity) condition
parityData <- subset(data, data$condition == "Memory")
parityACC <- data.frame(getAccuracy(parityData))
parityACC <- mutate(parityACC, avAccuracy = 0)
for(i in 1:nrow(parityACC)){
parityACC$avAccuracy[i] = mean(as.numeric(parityACC[i, 2:9]))
}
#which participants need to be removed?
parityRemoved <- parityACC$subject[which
(parityACC$avAccuracy < accCriterion)]
#list of all subjects to remove
removedSubjects <- unique(c(locationRemoved, parityRemoved))
# get the positions of the subjects to removed
parityRemoved_position <- which(parityACC$subject %in% removedSubjects)
locationRemoved_position <- which(locationACC$subject %in% removedSubjects)
parityACC_final <- parityACC[-parityRemoved_position, ]
parityACC_final[, 11] <- "Memory"
colnames(parityACC_final)[11] <- "condition"
locationACC_final <- locationACC[-locationRemoved_position, ]
locationACC_final[, 11] <- "Perceptual"
colnames(locationACC_final)[11] <- "condition"
finalACC <- rbind(locationACC_final, parityACC_final)
write.csv(finalACC, "finalAccuracy.csv")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### get mean response times for each condition, after trimming
# only use correct RT preceded by correct RT
errorTrimmed <- subset(data, data$accuracyTrim == 1)
# do location condition
locationData <- subset(errorTrimmed, errorTrimmed$condition == "Perceptual")
locationRT <- getRTs(locationData, minRT, sdCriterion)
locationRT <- data.frame(locationRT)
locationRT[, 10] <- "Perceptual"
colnames(locationRT)[10] <- "condition"
locationRT_final <- locationRT[-locationRemoved_position, ]
# do parity condition
parityData <- subset(errorTrimmed, errorTrimmed$condition == "Memory")
parityRT <- getRTs(parityData, minRT, sdCriterion)
parityRT <- data.frame(parityRT)
parityRT[, 10] <- "Memory"
colnames(parityRT)[10] <- "condition"
parityRT_final <- parityRT[-parityRemoved_position, ]
finalRTs <- rbind(locationRT_final, parityRT_final)
write.csv(finalRTs, "finalRTs.csv")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### Do RT analysis
# first, put the data in long format
rtsLong <- doLong(finalRTs)
# disable scientific notation
options(scipen = 999)
options(digits = 3)
## ANVOA using ezANOVA
aov.rt <- ezANOVA(
data = rtsLong
, dv = .(rt)
, wid = .(subject)
, within = .(sequence, rci, rcichange, task)
, between = NULL
, detailed = F
)
aov.rt
rtsLong
head(rtsLong)
rtsLong <- subset(rtsLong$task == "memory")
# disable scientific notation
options(scipen = 999)
options(digits = 3)
## ANVOA using ezANOVA
aov.rt <- ezANOVA(
data = rtsLong
, dv = .(rt)
, wid = .(subject)
, within = .(sequence, rci, rcichange)
, between = NULL
, detailed = F
)
aov.rt
(rts$Task)
rtsLong <- doLong(finalRTs)
# get the means for each condition into a data frame
rts <- summariseRTs(rtsLong)
# re-order factor levels
rts$RCI  <- factor(rts$RCI, levels = c("50", "1000"))
rts$RCIChange <- factor(rts$RCIChange, levels = c("Same", "Different"))
rts
rtsLong <- doLong(finalRTs)
# get the means for each condition into a data frame
rts <- summariseRTs(rtsLong)
# re-order factor levels
rts$RCI  <- factor(rts$RCI, levels = c("50", "1000"))
rts$RCIChange <- factor(rts$RCIChange, levels = c("Same", "Different"))
#rename "location" and "parity" tasks to "Perceptual" and "Memory
levels(rts$Task)[levels(rts$Task)=="perceptual"] <- "Perceptual"
levels(rts$Task)[levels(rts$Task)=="memory"] <- "Categorisation"
str(rts)
rts
rts <- subset(rts, rts$Task == "Categorisation")
str(rts)
rts$Task <- as.factor(rts$Task)
str(rts)
plot <- ggplot(rts, aes(x = RCI, y = RT, group = Sequence, colour = Sequence))
plot <- plot + geom_errorbar(aes(ymin = RT - SE, ymax = RT + SE), width = .05,
size = 0.5)
plot <- plot + geom_line(aes(linetype = Sequence))
plot <- plot + scale_linetype_manual(breaks = c("Repeat", "Switch"), values = c(5,1))
plot <- plot + geom_point(aes(shape = Sequence), size = 2.3)
plot <- plot + scale_x_discrete(name = "Response-Cue Interval (ms)") +
scale_y_continuous(name = "Response Time (ms)")
plot + facet_grid(  ~ RCIChange)
pd <- position_dodge(.02)
theme_set(theme_gray(base_size = 18))
pdf("grangeData.pdf", width = 8, height = 5)
plot <- ggplot(rts, aes(x = RCI, y = RT, group = Sequence, colour = Sequence))
plot <- plot + geom_errorbar(aes(ymin = RT - SE, ymax = RT + SE), width = .05,
size = 0.5)
plot <- plot + geom_line(aes(linetype = Sequence))
plot <- plot + scale_linetype_manual(breaks = c("Repeat", "Switch"), values = c(5,1))
plot <- plot + geom_point(aes(shape = Sequence), size = 2.3)
plot <- plot + scale_x_discrete(name = "Response-Cue Interval (ms)") +
scale_y_continuous(name = "Response Time (ms)")
plot + facet_grid(  ~ RCIChange)
dev.off()
head(rtsLong)
repData <- subset(rtsLong, rtsLong$sequence == "repeat")
swData <- subset(rtsLong, rtsLong$sequence == "switch")
repData
head(repData)
repAOV <- ezANOVA(
data = repData
, dv = .(rt)
, wid = .(subject)
, within = .(rci, rcichange)
, between = NULL
,detailed = F
)
repAOV
swAOV <- ezANOVA(
data = swData
, dv = .(rt)
, wid = .(subject)
, within = .(rci, rcichange)
, between = NULL
,detailed = F
)
swAOV
aov.rt
head(rtsLong)
repData <- subset(rtsLong, rtsLong$rcichange == "same")
swData <- subset(rtsLong, rtsLong$rcichange == "different")
repAOV <- ezANOVA(
data = repData
, dv = .(rt)
, wid = .(subject)
, within = .(rci, sequence)
, between = NULL
,detailed = F
)
repAOV
swAOV <- ezANOVA(
data = swData
, dv = .(rt)
, wid = .(subject)
, within = .(rci, sequence)
, between = NULL
,detailed = F
)
swAOV
repData <- subset(rtsLong, rtsLong$sequence == "repeat")
swData <- subset(rtsLong, rtsLong$sequence == "switch")
repAOV <- ezANOVA(
data = repData
, dv = .(rt)
, wid = .(subject)
, within = .(rci, rcichange)
, between = NULL
,detailed = F
)
repAOV
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Grange (under review) re-analysis")
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Grange (under review) re-analysis")
source("functions.R")
# package for changing data from wide format to long format
if(require(reshape2)==FALSE){
install.packages("reshape2", dependencies=TRUE)
}
# package for summarising data
if(require(dplyr)==FALSE){
install.packages("dplyr", dependencies=TRUE)
}
#package for plotting
if(require(ggplot2)==FALSE){
install.packages("ggplot2", dependencies=TRUE)
}
#package for ANOVA
if(require(ez)==FALSE){
install.packages("ez", dependencies=TRUE)
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# source the data & declare trimming details etc.
rawData <- read.csv("allData.csv")
colnames(rawData) <- c("subject", "trial", "condition", "task", "sequence",
"currentRCI", "previousRCI", "rciChange", "accuracy",
"rt")
# add column to store error trimming details (to remove trials afer error)
rawData <- mutate(rawData, accuracyTrim = 0)
# only select the pertinent columns
data <- select(rawData, subject, condition, sequence, currentRCI, rciChange,
accuracy, accuracyTrim, rt)
# remove null trials
data <- subset(data, data$sequence != "null")
# add the accuracy trimming column (removing trial after error)
data <- addError(data)
# what is the accuracy threshold for inclusion
accCriterion <- 80
# what is the minimum RT allowed?
minRT <- 150
# how many SDs to trim RTs to?
sdCriterion <- 2.5
# how many trials per participant in the whole condition?
nTrials <- 384
# perceptual (location) condition
locationData <- subset(data, data$condition == "Perceptual")
locationACC <- data.frame(getAccuracy(locationData))
locationACC <- mutate(locationACC, avAccuracy = 0)
for(i in 1:nrow(locationACC)){
locationACC$avAccuracy[i] = mean(as.numeric(locationACC[i, 2:9]))
}
#which participants need to be removed?
locationRemoved <- locationACC$subject[which
(locationACC$avAccuracy < accCriterion)]
parityData <- subset(data, data$condition == "Memory")
parityACC <- data.frame(getAccuracy(parityData))
parityACC <- mutate(parityACC, avAccuracy = 0)
for(i in 1:nrow(parityACC)){
parityACC$avAccuracy[i] = mean(as.numeric(parityACC[i, 2:9]))
}
#which participants need to be removed?
parityRemoved <- parityACC$subject[which
(parityACC$avAccuracy < accCriterion)]
#list of all subjects to remove
removedSubjects <- unique(c(locationRemoved, parityRemoved))
# get the positions of the subjects to removed
parityRemoved_position <- which(parityACC$subject %in% removedSubjects)
locationRemoved_position <- which(locationACC$subject %in% removedSubjects)
parityACC_final <- parityACC[-parityRemoved_position, ]
parityACC_final[, 11] <- "Memory"
colnames(parityACC_final)[11] <- "condition"
locationACC_final <- locationACC[-locationRemoved_position, ]
locationACC_final[, 11] <- "Perceptual"
colnames(locationACC_final)[11] <- "condition"
finalACC <- rbind(locationACC_final, parityACC_final)
write.csv(finalACC, "finalAccuracy.csv")
# only use correct RT preceded by correct RT
errorTrimmed <- subset(data, data$accuracyTrim == 1)
# do location condition
locationData <- subset(errorTrimmed, errorTrimmed$condition == "Perceptual")
locationRT <- getRTs(locationData, minRT, sdCriterion)
locationRT <- data.frame(locationRT)
locationRT[, 10] <- "Perceptual"
colnames(locationRT)[10] <- "condition"
locationRT_final <- locationRT[-locationRemoved_position, ]
# do parity condition
parityData <- subset(errorTrimmed, errorTrimmed$condition == "Memory")
parityRT <- getRTs(parityData, minRT, sdCriterion)
parityRT <- data.frame(parityRT)
parityRT[, 10] <- "Memory"
colnames(parityRT)[10] <- "condition"
parityRT_final <- parityRT[-parityRemoved_position, ]
finalRTs <- rbind(locationRT_final, parityRT_final)
write.csv(finalRTs, "finalRTs.csv")
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### Do RT analysis
# first, put the data in long format
rtsLong <- doLong(finalRTs)
# just select the "memory" data
rtsLong <- subset(rtsLong$task == "memory")
# disable scientific notation
options(scipen = 999)
options(digits = 3)
rtsLong
subset(rtsLong$task == "memory")
head(rtsLong)
# just select the "memory" data
rtsLong <- subset(rtsLong, rtsLong$task == "memory")
rtsLong
rtsLong <- doLong(finalRTs)
# just select the "memory" data
rtsLong <- subset(rtsLong, rtsLong$task == "memory")
# disable scientific notation
options(scipen = 999)
options(digits = 3)
## ANVOA using ezANOVA
aov.rt <- ezANOVA(
data = rtsLong
, dv = .(rt)
, wid = .(subject)
, within = .(sequence, rci, rcichange)
, between = NULL
, detailed = F
)
head(rtsLong)
temp <- subset(rtsLong, rtsLong$sequence == "repeat" &
rtsLong$rcichange == "same")
temp
temp <- subset(rtsLong, rtsLong$sequence == "repeat" &
rtsLong$rcichange == "same")
collapse <- ezANOVA(
data = temp
, dv = (.rt)
, wid = .(subject)
, within = .(rci)
, between = NULL
, detailed = F
)
head(temp)
collapse <- ezANOVA(
data = temp
, dv = .(rt)
, wid = .(subject)
, within = .(rci)
, between = NULL
, detailed = F
)
collapse
?t.test
fifty <- subset(rtsLong, rtsLong$sequence == "repeat" &
rtsLong$rcichange == "same" & rtsLong$rci == 50)
fifty <- fifty$rt
thousand <- subset(rtsLong, rtsLong$sequence == "repeat" &
rtsLong$rcichange == "same" & rtsLong$rci == 1000)
thousand <- thousand$rt
t.test(fifty, thousand, paired = TRUE)
bayes.t.test(fifty, thousand, paired = TRUE)
library(BayesianFirstAid)
bayes.t.test(fifty, thousand, paired = TRUE)
x = bayes.t.test(fifty, thousand, paired = TRUE)
plot(x)
library(BayesFactor)
diff = thousand - fifty
ttestBF(x = diff)
1/0.793
length(diff)
diff
length(fifty)
length(thousand)
t.test(fifty, thousand, paired = TRUE)
fifty
thousand
t.test(x = fifty, y = thousand, paired = TRUE)
t.test(diff, mu = 0)
diff
?t.test
t.test(x = fifty, y = thousand, paired = TRUE, var.equal = TRUE)
t.test(x = fifty, y = thousand, paired = TRUE, alternative = "t")
t.test(x = fifty, y = thousand, paired = TRUE, alternative = "l")
t.test(x = fifty, y = thousand, paired = TRUE, alternative = "g")
x = rnorm(25)
y = rnorm(25)
t.test(x, y, paired = TRUE)
fifty
thousand
t.test(x = fifty, y = thousand, paired = TRUE)
ttestBF(x = diff)
1/0.793
