p <- 0.7
A <- 500
b <- c(A + 120, A + 120)
drift <- c(1.2, 0.6)
s <- 0.3
ter <- 220
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the mixed distribution
for(i in 1:nSubjects){
dataZ <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = p)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the fast distribution x
for(i in 1:nSubjects){
dataX <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 1)
dataX <- mutate(dataX, cond = 1, pp = i)
x <- rbind(x, dataX)
}
# simulate the slow distribution y
for(i in 1:nSubjects){
dataY <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 0)
dataY <- mutate(dataY, cond = 3, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
# get the fp1 object
res <- fpGet(data[, c("rt", "cond")], 1000, bw = 0.75)
# call fixed-point plot
par(las = 1, mfrow = c(1, 3), mar = c(4.2, 4.2, 1, 1))
# make the plot and save it as PDF
pdf("fpExample.pdf", width = 8, height = 5)
plot(res, xlab = "Resonse Time (S)", col = 1)
dev.off()
#------------------------------------------------------------------------------
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA_Mixture(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
z
head(z)
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
#------------------------------------------------------------------------------
### do shift distribution
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the "fast" distribution
for(i in 1:nSubjects){
dataX <- simLBA(n = nTrials, b = 620, a = 500, drift = 1.2, s = 0.3,
ter = 220)
dataX <- mutate(dataX, cond = 2, pp = i)
x <- rbind(x, dataX)
}
# simulate the "intermediate" distribution
for(i in 1:nSubjects){
dataY <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.9, s = 0.3,
ter = 220)
dataY <- mutate(dataY, cond = 2, pp = i)
y <- rbind(y, dataY)
}
collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
# get the fp1 object
res <- fpGet(data[, c("rt", "cond")], 1000, bw = 0.75)
# call fixed-point plot
par(las = 1, mfrow = c(1, 3), mar = c(4.2, 4.2, 1, 1))
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
res <- fpGet(data[, c("rt", "cond")], 1000, bw = 0.75)
data
head(data)
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
#------------------------------------------------------------------------------
### do shift distribution
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the "fast" distribution
for(i in 1:nSubjects){
dataX <- simLBA(n = nTrials, b = 620, a = 500, drift = 1.2, s = 0.3,
ter = 220)
dataX <- mutate(dataX, cond = 2, pp = i)
x <- rbind(x, dataX)
}
# simulate the "intermediate" distribution
for(i in 1:nSubjects){
dataY <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.9, s = 0.3,
ter = 220)
dataY <- mutate(dataY, cond = 2, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
# get the fp1 object
res <- fpGet(data[, c("rt", "cond")], 1000, bw = 0.75)
data[, c("rt", "cond")]
dat = data[, c("rt", "cond")]
n = 1000
bw = 0.75
if (is.matrix(dat)) dat <- as.data.frame(dat)
range(dat[[1]])
rng <- range(dat[[1]])
dens <- tapply(dat[[1]], dat[[2]], density, from=rng[1], to=rng[2], n=n,
bw=bw)
diff <- NULL
for (i in 2:length(dens)) {
for (j in 1:(i-1)) {
# difference (density-based method)
tmp <- data.frame(dens[[i]]$y - dens[[j]]$y)
names(tmp) <- paste(i,j,sep='-')
if (is.null(diff)) diff <- tmp else diff <- cbind(diff, tmp)
}
}
length(dens)
dens
dat[[1]]
dat[[2]]
fpGet(data[, c("rt", "cond")], 200, bw = 0.75)
# declare the parameters
p <- 0.7
A <- 500
b <- c(A + 120, A + 120)
drift <- c(1.2, 0.6)
s <- 0.3
ter <- 220
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the mixed distribution
for(i in 1:nSubjects){
dataZ <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = p)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the fast distribution x
for(i in 1:nSubjects){
dataX <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 1)
dataX <- mutate(dataX, cond = 1, pp = i)
x <- rbind(x, dataX)
}
# simulate the slow distribution y
for(i in 1:nSubjects){
dataY <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 0)
dataY <- mutate(dataY, cond = 3, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
res <- fpGet(data[, c("rt", "cond")], 1000, bw = 0.75)
head(data)
res
tail(data)
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
#------------------------------------------------------------------------------
### do shift distribution
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the "fast" distribution
for(i in 1:nSubjects){
dataX <- simLBA(n = nTrials, b = 620, a = 500, drift = 1.2, s = 0.3,
ter = 220)
dataX <- mutate(dataX, cond = 2, pp = i)
x <- rbind(x, dataX)
}
# simulate the "intermediate" distribution
for(i in 1:nSubjects){
dataY <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.9, s = 0.3,
ter = 220)
dataY <- mutate(dataY, cond = 2, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
str(data)
dataX
dataY
# declare the parameters
p <- 0.7
A <- 500
b <- c(A + 120, A + 120)
drift <- c(1.2, 0.6)
s <- 0.3
ter <- 220
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the mixed distribution
for(i in 1:nSubjects){
dataZ <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = p)
dataZ <- mutate(dataZ, cond = 2, pp = i)
z <- rbind(z, dataZ)
}
# simulate the fast distribution x
for(i in 1:nSubjects){
dataX <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 1)
dataX <- mutate(dataX, cond = 1, pp = i)
x <- rbind(x, dataX)
}
# simulate the slow distribution y
for(i in 1:nSubjects){
dataY <- simLBA_Mixture(n = nTrials, bs = b, a = A, drift = drift, s = s,
ter = ter, p = 0)
dataY <- mutate(dataY, cond = 3, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
dat = data[, c("rt", "cond")]
n = 1000
bw = 0.75
if (is.matrix(dat)) dat <- as.data.frame(dat)
rng <- range(dat[[1]])
dens <- tapply(dat[[1]], dat[[2]], density, from=rng[1], to=rng[2], n=n,
bw=bw)
dens
dat[[2]]
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
#------------------------------------------------------------------------------
### do shift distribution
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 3, pp = i)
z <- rbind(z, dataZ)
}
# simulate the "fast" distribution
for(i in 1:nSubjects){
dataX <- simLBA(n = nTrials, b = 620, a = 500, drift = 1.2, s = 0.3,
ter = 220)
dataX <- mutate(dataX, cond = 1, pp = i)
x <- rbind(x, dataX)
}
# simulate the "intermediate" distribution
for(i in 1:nSubjects){
dataY <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.9, s = 0.3,
ter = 220)
dataY <- mutate(dataY, cond = 2, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
# get the fp1 object
res <- fpGet(data[, c("rt", "cond")], 200, bw = 0.75)
# call fixed-point plot
par(las = 1, mfrow = c(1, 3), mar = c(4.2, 4.2, 1, 1))
# make the plot and save it as PDF
pdf("fpExample_Shifted.pdf", width = 8, height = 5)
plot(res, xlab = "Resonse Time (S)", col = 1)
dev.off()
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Model Fit")
#------------------------------------------------------------------------------
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Model Fit")
# load required libraries & functions
library(dplyr)
source("functions.R")
# get the data (& do trimming & round RTs to nearest integer)
data <- read.csv("data.csv")
data <- subset(data, data$condition == "Memory" & data$errorTrimming == 1 &
data$sequence != "null" & data$sequence == "repeat")
head(data)
colnames(data)[1] <- "participant"
data <- sdTrim(data, minRT = 150, sd = 2.5, perCondition = TRUE,
perParticipant = TRUE, omitErrors = FALSE, returnType = "raw")
head(data)
colnames(data)[1] <- "subject"
#------------------------------------------------------------------------------
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Model Fit")
# load required libraries & functions
library(dplyr)
source("functions.R")
# get the data (& do trimming & round RTs to nearest integer)
data <- read.csv("data.csv")
data <- subset(data, data$condition == "Memory" & data$errorTrimming == 1 &
data$sequence != "null" & data$sequence == "repeat")
# change the "subject" to participant, just for the SD trimming
colnames(data)[1] <- "participant"
# do the SD trimming
data <- sdTrim(data, minRT = 150, sd = 2.5, perCondition = TRUE,
perParticipant = TRUE, omitErrors = FALSE, returnType = "raw")
colnames(data)[1] <- "subject"
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# get the data for QMP
quantiles <- c(.1, .3, .5, .7, .9)
fast <- subset(data, data$ratio == 20)
fast <- prepData(fast)
slow <- subset(data, data$ratio == 0.05)
slow <- prepData(slow)
int <- subset(data, data$ratio == 1)
int <- prepData(int)
data <- list(fast = fast, slow = slow, int = int)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### fit the model
## get the starting parameters separately by condition (A, b, drift, s, ter)
slowParms <- getStartParms(data$slow)
fastParms <- getStartParms(data$fast)
intParms <- getStartParms(data$int)
# sort the starting parameters for overall fit
A <- mean(c(slowParms[1], fastParms[1], intParms[1]))
b <- c(fastParms[2], slowParms[2])
driftFast <- fastParms[3]
driftSlow <- slowParms[3]
driftInt <- intParms[3]
s <- mean(c(slowParms[4], fastParms[4], intParms[4]))
ter <- mean(c(slowParms[5], fastParms[5], intParms[5]))
p <- 0.7
# store the parameters
parameters <- c(log(p), log(A), log(b), driftFast, driftSlow, log(s),
log(ter))
round(x, 3)
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Testing Mixture Distributions/fp Example")
source("functions.R")
library(dplyr)
set.seed(1)
#------------------------------------------------------------------------------
### do shift distribution
# how many subjects?
nSubjects <- 16
# how many trials?
nTrials <- 200
# get the data
z <- NULL
x <- NULL
y <- NULL
# simulate the "slow" distribution
for(i in 1:nSubjects){
dataZ <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.6, s = 0.3,
ter = 220)
dataZ <- mutate(dataZ, cond = 3, pp = i)
z <- rbind(z, dataZ)
}
# simulate the "fast" distribution
for(i in 1:nSubjects){
dataX <- simLBA(n = nTrials, b = 620, a = 500, drift = 1.2, s = 0.3,
ter = 220)
dataX <- mutate(dataX, cond = 1, pp = i)
x <- rbind(x, dataX)
}
# simulate the "intermediate" distribution
for(i in 1:nSubjects){
dataY <- simLBA(n = nTrials, b = 620, a = 500, drift = 0.9, s = 0.3,
ter = 220)
dataY <- mutate(dataY, cond = 2, pp = i)
y <- rbind(y, dataY)
}
# collate the data
data <- rbind(z, x, y)
data <- subset(data, data$accuracy == 1)
data <- subset(data, data$rt < 2000)
data <- select(data, rt, cond, pp)
data$rt <- data$rt / 1000
# get the fp1 object
res <- fpGet(data[, c("rt", "cond")], 200, bw = 0.75)
# call fixed-point plot
par(las = 1, mfrow = c(2, 3), mar = c(4.2, 4.2, 1, 1))
plot(res, xlab = "Resonse Time (S)", col = 1)
par(las = 1, mfrow = c(1, 2), mar = c(4.2, 4.2, 1, 1))
plot(res, xlab = "Resonse Time (S)", col = 1)
par(las = 1, mfrow = c(1, 3), mar = c(4.2, 4.2, 1, 1))
plot(res, xlab = "Resonse Time (S)", col = 1)
res
res[[1]]
res[1]
str(res)
