abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(presDiff)/2)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(absDiff)/2)
abline(v = 0, col = "red", lwd = 2, lty = 2)
c(min(presDiff, absDiff), max(presDiff, absDiff))
xlim <- c(min(presDiff, absDiff), max(presDiff, absDiff))
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(presDiff)/2, xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(absDiff)/2, xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(presDiff), xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = length(absDiff), xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 2, lty = 2)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
xlim <- c(min(presDiff, absDiff) - 20, max(presDiff, absDiff) + 20)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
# get the xlimits
xlim <- c(min(presDiff, absDiff) - 10, max(presDiff, absDiff) + 10)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
# get the xlimits
xlim <- c(min(presDiff, absDiff) - 5, max(presDiff, absDiff) + 5)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
xlim <- c(min(presDiff, absDiff), max(presDiff, absDiff))
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
par(mfrow = c(2, 1))
pdf("individualHistExp1.pdf", width = 8.5, height = 8.5)
# get the difference scores
presDiff <- presDSTP$bBIC - presSSP$bBIC
absDiff <- absDSTP$bBIC - absSSP$bBIC
## plot the histograms
# get the xlimits
xlim <- c(min(presDiff, absDiff), max(presDiff, absDiff))
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
dev.off()
pdf("individualHistExp1.pdf", width = 8.5, height = 8.5)
par(mfrow = c(2, 1))
# get the difference scores
presDiff <- presDSTP$bBIC - presSSP$bBIC
absDiff <- absDSTP$bBIC - absSSP$bBIC
## plot the histograms
# get the xlimits
xlim <- c(min(presDiff, absDiff), max(presDiff, absDiff))
hist(presDiff, main = "AS-Present", xlab = "DSTP bBIC - SSP bBIC",
breaks  = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
hist(absDiff, main = "AS-Absent", xlab = "DSTP bBIC - SSP bBIC",
breaks = 10, xlim = xlim)
abline(v = 0, col = "red", lwd = 3, lty = 1)
dev.off()
14/25
15/25
presDSTP
head(presDSTP)
mean(presDSTP$bBIC)
mean(absDSTP$bBIC)
mean(presSSP$bBIC)
mean(absSSP$bBIC)
a <- t.test(pres$A, abs$A, paired = TRUE)
c <- t.test(pres$C, abs$C, paired = TRUE)
muT <- t.test(pres$muT, abs$muT, paired = TRUE)
muFl <- t.test(pres$muFl, abs$muFl, paired = TRUE)
muSS <- t.test(pres$muSS, abs$muSS, paired = TRUE)
muRS2 <- t.test(pres$muRS2, abs$muRS2, paired = TRUE)
ter <- t.test(pres$ter, abs$ter, paired = TRUE)
a <- t.test(presDSTP$A, absDSTP$A, paired = TRUE)
c <- t.test(presDSTP$C, absDSTP$C, paired = TRUE)
muT <- t.test(presDSTP$muT, absDSTP$muT, paired = TRUE)
muFl <- t.test(presDSTP$muFl, absDSTP$muFl, paired = TRUE)
muSS <- t.test(presDSTP$muSS, absDSTP$muSS, paired = TRUE)
muRS2 <- t.test(presDSTP$muRS2, absDSTP$muRS2, paired = TRUE)
ter <- t.test(presDSTP$ter, absDSTP$ter, paired = TRUE)
a
c
muT
muFl
muSS
muRS2
mean(presDSTP$A)
sd(presDSTP$A)
mean(presDSTP$C)
sd(presDSTP$C)
mean(presDSTP$muT)
mean(presDSTP$muFl)
mean(presDSTP$muSS)
mean(presDSTP$muRS2)
mean(presDSTP$ter)
sd(presDSTP$muT)
sd(presDSTP$muFl)
sd(presDSTP$muSS)
sd(presDSTP$muRS2)
sd(presDSTP$ter)
mean(absDSTP$A)
mean(presDSTP$A)
mean(absDSTP$C)
mean(absDSTP$muT)
mean(absDSTP$muFl)
mean(absDSTP$muSS)
mean(absDSTP$muRS2)
mean(absDSTP$ter)
sd(presDSTP$A)
sd(presDSTP$C)
sd(absDSTP$A)
sd(absDSTP$C)
sd(absDSTP$muT)
sd(absDSTP$muFl)
sd(absDSTP$muSS)
sd(absDSTP$muRS2)
sd(absDSTP$ter)
a
c
muT
muFl
muSS
muRS2
ter
a
str(a)
a$statistic
library(BayesFactor)
a$parameter
exp(ttest.tstat(t = a$statistic, n1 = a$parameter + 1,
rscale = 0.707))[['bf']]
a$statistic + 1
exp(ttest.tstat(t = as.numeric(a$statistic), n1 = as.numeric(a$parameter)
+ 1, rscale = 0.707))[['bf']]
a <- t.test(presDSTP$A, absDSTP$A, paired = TRUE)
c <- t.test(presDSTP$C, absDSTP$C, paired = TRUE)
muT <- t.test(presDSTP$muT, absDSTP$muT, paired = TRUE)
muFl <- t.test(presDSTP$muFl, absDSTP$muFl, paired = TRUE)
muSS <- t.test(presDSTP$muSS, absDSTP$muSS, paired = TRUE)
muRS2 <- t.test(presDSTP$muRS2, absDSTP$muRS2, paired = TRUE)
ter <- t.test(presDSTP$ter, absDSTP$ter, paired = TRUE)
exp(ttest.tstat(t = as.numeric(a$statistic), n1 = as.numeric(a$parameter)
+ 1, rscale = 0.707))[['bf']]
exp(ttest.tstat(t = as.numeric(a$statistic), n1 = 25,
rscale = 0.707))
# bayesian t-tests
library(BayesFactor)
exp(ttest.tstat(t = as.numeric(a$statistic), n1 = 25,
rscale = 0.707))[['bf']]
exp(ttest.tstat(t=-4.09, n1=25, rscale = 0.707)[['bf']])
as.numeric(a$statistic)
n1 = 25
exp(ttest.tstat(t = as.numeric(a$statistic), n1 = 25,
rscale = 0.707)[['bf']])
1/0.2116274
cB <- exp(ttest.tstat(c = as.numeric(a$statistic), n1 = 25,
rscale = 0.707)[['bf']])
aB <- exp(ttest.tstat(t = as.numeric(a$statistic), n1 = 25,
rscale = 0.707)[['bf']])
cB <- exp(ttest.tstat(t = as.numeric(c$statistic), n1 = 25,
rscale = 0.707)[['bf']])
muTB <- exp(ttest.tstat(t = as.numeric(muT$statistic), n1 = 25,
rscale = 0.707)[['bf']])
muFlB <- exp(ttest.tstat(t = as.numeric(muFl$statistic), n1 = 25,
rscale = 0.707)[['bf']])
muSSB <- exp(ttest.tstat(t = as.numeric(muSS$statistic), n1 = 25,
rscale = 0.707)[['bf']])
muRS2B <- exp(ttest.tstat(t = as.numeric(muRS2$statistic), n1 = 25,
rscale = 0.707)[['bf']])
terB <- exp(ttest.tstat(t = as.numeric(ter$statistic), n1 = 25,
rscale = 0.707)[['bf']])
aB
cB
muTB
muFlB
muSSB
muRS2B
terB
1/0.2116274
1/0.5761288
1/0.7139914
1/0.2559773
#------------------------------------------------------------------------------
rm(list = ls())
setwd("C:/Users/Home/Dropbox/Work/Research/Simulations/Accessory Stimuli/Exp35/Jacknife")
# load required packages
# what were the best fitting parameters again?
presParms <- read.csv("presentSubjectAverage_DSTP.csv")
presParms <- as.numeric(presParms$bestParameters)
absParms <- read.csv("absentSubjectAverage_DSTP.csv")
absParms <- as.numeric(absParms$bestParameters)
# read in the jackknifed data
presFit <- read.csv("presFit.csv")
absFit <- read.csv("absFit.csv")
# what is the difference in the full-sample parameters?
fullDiff <- presParms - absParms
# what is the difference in the jackknife sample?
jackDiff <- presFit - absFit
# get tStar (Equation 8)
tBar <- apply(jackDiff, 2, mean)
sigmaHat <- apply(jackDiff, 2, sd)
tStar <- round((25 * fullDiff) - (24 * tBar), 3)
sigmaT <- round(24 * (sigmaHat /  sqrt(25)), 3)
# critical t-value for df = 24
tCrit <- 2.064
tStar + tCrit * sigmaT
tStar - tCrit * sigmaT
jackDiff
tStar - tCrit * sigmaT
fullDiff <- presParms - absParms
# what is the difference in the jackknife parameters?
diff <- presFit - absFit
# what is the mean of the differences obtained in the subsamples?
jBar <- apply(diff, 2, mean)
# what is the sum of diff - jBar?
sumDiff <- diff - jBar
sumDiff <- sumDiff ^ 2
sumDiff <- apply(sumDiff, 2, sum)
# what is the jackknife estimate of the standard error? (Equation 2)
seJack <- (nrow(presFit) - 1) / nrow(presFit)
seJack <- seJack * sumDiff
seJack <- sqrt(seJack)
# get the t-values
ts <- fullDiff / seJack
# critical t-value for df = 24
tCrit <- 2.064
x = 0.179604461 - (tCrit * seJack[6])
x
ts
a <- t.test(presFit$A, absFit$A, paired = TRUE)
a <- as.numeric(a$statistic) ^ 2
a <- a / ((nrow(presFit) - 1) ^ 2)
a
c <- t.test(presFit$C, absFit$C, paired = TRUE)
c <- as.numeric(c$statistic) ^ 2
c <- c / ((nrow(presFit) - 1) ^ 2)
muT <- t.test(presFit$muT, absFit$muT, paired = TRUE)
muT <- as.numeric(muT$statistic) ^ 2
muT <- muT / ((nrow(presFit) - 1) ^ 2)
muFl <- t.test(presFit$muFl, absFit$muFl, paired = TRUE)
muFl <- as.numeric(muFl$statistic) ^ 2
muFl <- muFl / ((nrow(presFit) - 1) ^ 2)
muSS <- t.test(presFit$muSS, absFit$muSS, paired = TRUE)
muSS <- as.numeric(muSS$statistic) ^ 2
muSS <- muSS / ((nrow(presFit) - 1) ^ 2)
muRS2 <- t.test(presFit$muRS2, absFit$muRS2, paired = TRUE)
muRS2 <- as.numeric(muRS2$statistic) ^ 2
muRS2 <- muRS2 / ((nrow(presFit) - 1) ^ 2)
ter <- t.test(presFit$ter, absFit$ter, paired = TRUE)
ter <- as.numeric(ter$statistic) ^ 2
ter <- ter / ((nrow(presFit) - 1)) ^ 2
#--------------------------------------
muRS2
ts
seJack
apply(diff, 2, mean)
tStar + tCrit * sigmaT
tStar - tCrit * sigmaT
tStar
y
setwd("C:/Users/Home/Dropbox/Work/Research/Lab Book")
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Data & Model Code/Model Fit")
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Data & Model Code/Model Fit")
# load required libraries & functions
library(dplyr)
source("functions.R")
# get the data (& do trimming & round RTs to nearest integer)
data <- read.csv("data.csv")
data <- subset(data, data$condition == "Memory" & data$errorTrimming == 1 &
data$sequence != "null" & data$sequence == "repeat")
# change the "subject" to participant, just for the SD trimming
colnames(data)[1] <- "participant"
# do the SD trimming
data <- sdTrim(data, minRT = 150, sd = 2.5, perCondition = TRUE,
perParticipant = TRUE, omitErrors = FALSE, returnType = "raw")
colnames(data)[1] <- "subject"
quantiles <- c(.1, .3, .5, .7, .9)
fast <- subset(data, data$ratio == 20)
fast <- prepData(fast)
slow <- subset(data, data$ratio == 0.05)
slow <- prepData(slow)
int <- subset(data, data$ratio == 1)
int <- prepData(int)
data <- list(fast = fast, slow = slow, int = int)
fast
## get the starting parameters separately by condition (A, b, drift, s, ter)
slowParms <- getStartParms(data$slow)
fastParms <- getStartParms(data$fast)
intParms <- getStartParms(data$int)
A <- mean(c(slowParms[1], fastParms[1], intParms[1]))
b <- c(fastParms[2], slowParms[2])
driftFast <- fastParms[3]
driftSlow <- slowParms[3]
driftInt <- intParms[3]
s <- mean(c(slowParms[4], fastParms[4], intParms[4]))
ter <- mean(c(slowParms[5], fastParms[5], intParms[5]))
p <- 0.7
parameters
parameters <- c(log(p), log(A), log(b), driftFast, driftSlow, log(s),
log(ter))
p <- exp(parameters[1])
A <- exp(parameters[2])
bFast <- exp(parameters[3]) + A
bSlow <- exp(parameters[4]) + A
drift1Fast <- parameters[5]
drift2Fast <- 1 - drift1Fast
drift1Slow <- parameters[6]
drift2Slow <- 1 - driftSlow
s <- exp(parameters[7])
ter <- exp(parameters[8])
data
fastOut <- list(p = numeric(2))
fastOut$pfail <- prod(pnorm(-c(drift1Fast, drift2Fast) / s))
fastOut$p[1] <- defectiveCDF(t = Inf, A = A, b = bFast,
drift = c(drift1Fast, drift2Fast), s = s)
fastOut$p[2] <- defectiveCDF(t = Inf, A = A, b = bFast,
drift = c(drift2Fast, drift1Fast), s = s)
fastOut
data$fast$q[, 1]
fastCorrect <- defectiveCDF(t = data$fast$q[, 1] - ter, A = A, b = bFast,
drift = c(drift1Fast, drift2Fast), s = s)
fastCorrect
diff(c(0, fastCorrect, fastOut$p[1]))
fastCorrect <- diff(c(0, fastCorrect, fastOut$p[1]))
fastCorrect
fastError <- defectiveCDF(t = data$fast$q[, 2] - ter, A = A, b = bFast,
drift = c(drift2Fast, drift1Fast), s = s)
# take the difference between each successive quantile value
fastError <- diff(c(0, fastError, fastOut$p[2]))
fastCorrect[which(fastCorrect <= 1e-10)] <- 1e-10
fastError[which(fastError <= 1e-10)] <- 1e-10
fastModel <- data.frame(correct = fastCorrect, error = fastError)
fastModel
#------------------------------------------------------------------------------
rm(list = ls())
setwd("~/Git/paperData/2015/Temporal Distinctiveness & Mixture Distributions/Revision 1/Data & Model Code/Model Fit")
# load required libraries & functions
library(dplyr)
source("functions.R")
# get the data (& do trimming & round RTs to nearest integer)
data <- read.csv("data.csv")
data <- subset(data, data$condition == "Memory" & data$errorTrimming == 1 &
data$sequence != "null" & data$sequence == "repeat")
# change the "subject" to participant, just for the SD trimming
colnames(data)[1] <- "participant"
# do the SD trimming
data <- sdTrim(data, minRT = 150, sd = 2.5, perCondition = TRUE,
perParticipant = TRUE, omitErrors = FALSE, returnType = "raw")
colnames(data)[1] <- "subject"
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# get the data for QMP
quantiles <- c(.1, .3, .5, .7, .9)
fast <- subset(data, data$ratio == 20)
fast <- prepData(fast)
slow <- subset(data, data$ratio == 0.05)
slow <- prepData(slow)
int <- subset(data, data$ratio == 1)
int <- prepData(int)
data <- list(fast = fast, slow = slow, int = int)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
### fit the model
## get the starting parameters separately by condition (A, b, drift, s, ter)
slowParms <- getStartParms(data$slow)
fastParms <- getStartParms(data$fast)
intParms <- getStartParms(data$int)
# sort the starting parameters for overall fit
A <- mean(c(slowParms[1], fastParms[1], intParms[1]))
b <- c(fastParms[2], slowParms[2])
driftFast <- fastParms[3]
driftSlow <- slowParms[3]
driftInt <- intParms[3]
s <- mean(c(slowParms[4], fastParms[4], intParms[4]))
ter <- mean(c(slowParms[5], fastParms[5], intParms[5]))
p <- 0.7
# store the parameters
parameters <- c(log(p), log(A), log(b), driftFast, driftSlow, log(s),
log(ter))
# do the fit
fit <- optim(par = parameters, fn = fitFunction, data = data,
list(maxit = 10000, parscale = parameters))
x <- fit$par
x[c(1, 2, 3, 4, 7, 8)] <- exp(x[c(1, 2, 3, 4, 7, 8)])
x <- round(x, 3)
# first, extract the parameters
p <- x[1]
A <- x[2]
bFast <- x[3] + A
bSlow <- x[4] + A
driftFast <- x[5]
driftSlow <- x[6]
s <- x[7]
ter <- x[8]
## get model predictions
n = 50000
# fast condition
fastSim <- simLBA_Mixture(n = n, b = c(bFast, bSlow), a = A,
drift = c(driftFast, driftSlow), s = s, ter = ter,
p = 1)
fastSim <- prepData(fastSim)
# slow condition
slowSim <- simLBA_Mixture(n = n, b = c(bFast, bSlow), a = A,
drift = c(driftFast, driftSlow), s = s, ter = ter,
p = 0)
slowSim <- prepData(slowSim)
# mixture distribution
intSim <- simLBA_Mixture(n = n, b = c(bFast, bSlow), a = A,
drift = c(driftFast, driftSlow), s = s, ter = ter,
p = p)
intSim <- prepData(intSim)
## do some plots
# fast
fastHumanCorrectRT <- data$fast$q$correct
fastHumanCorrectCDF <- quantiles * data$fast$p
fastHumanErrorRT <- data$fast$q$error
fastHumanErrorCDF <- quantiles * (1 - data$fast$p)
fastModelCorrectRT <- fastSim$q$correct
fastModelCorrectCDF <- quantiles * fastSim$p
fastModelErrorRT <- fastSim$q$error
fastModelErrorCDF <- quantiles * (1 - fastSim$p)
# intermediate
intHumanCorrectRT <- data$int$q$correct
intHumanCorrectCDF <- quantiles * data$int$p
intHumanErrorRT <- data$int$q$error
intHumanErrorCDF <- quantiles * (1 - data$int$p)
intModelCorrectRT <- intSim$q$correct
intModelCorrectCDF <- quantiles * intSim$p
intModelErrorRT <- intSim$q$error
intModelErrorCDF <- quantiles * (1 - intSim$p)
# slow
slowHumanCorrectRT <- data$slow$q$correct
slowHumanCorrectCDF <- quantiles * data$slow$p
slowHumanErrorRT <- data$slow$q$error
slowHumanErrorCDF <- quantiles * (1 - data$slow$p)
slowModelCorrectRT <- slowSim$q$correct
slowModelCorrectCDF <- quantiles * slowSim$p
slowModelErrorRT <- slowSim$q$error
slowModelErrorCDF <- quantiles * (1 - slowSim$p)
fastHumanCorrectRT
fastHumanErrorRT
fastModelCorrectRT
fastHumanCorrectCDF
fastModelCorrectCDF
fit
human <- c(fastHumanCorrectRT, fastHumanErrorRT, intHumanCorrectRT, intHumanErrorRT, slowHumanCorrectRT, slowHumanErrorRT)
human <- c(fastHumanCorrectRT, fastHumanErrorRT, intHumanCorrectRT,
intHumanErrorRT, slowHumanCorrectRT, slowHumanErrorRT)
model <- c(fastModelCorrectRT, fastModelErrorRT, intModelCorrectRT,
intModelErrorRT, slowModelCorrectRT, slowModelErrorRT)
correlation <- cor(human, model)
cor(human, model) ^ 2
humanCorrect <- c(fastHumanCorrectRT, intHumanCorrectRT, slowHumanCorrectRT)
modelCorrect <- c(fastModelCorrectRT, intModelCorrectRT, slowModelCorrectRT)
cor(humanCorrect, modelCorrect) ^ 2
humanError <- c(fastHumanErrorRT, intHumanErrorRT, slowHumanErrorRT)
modelError <- c(fastModelErrorRT, intModelErrorRT, slowModelErrorRT)
cor(humanError, modelError) ^ 2
